import os
from openai import OpenAI
import gradio as gr
import base64
from PIL import Image
from io import BytesIO
from dotenv import load_dotenv
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from datetime import datetime
import tempfile
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables from .env file
load_dotenv()

# Initialize OpenAI client with API key from .env
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def image_to_base64(image):
    buffered = BytesIO()
    image.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode()

def create_pdf_report(analysis_results, images):
    # Create a temporary file for the PDF
    temp_pdf = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
    pdf_path = temp_pdf.name
    temp_pdf.close()

    # Create the PDF document
    doc = SimpleDocTemplate(pdf_path, pagesize=letter)
    styles = getSampleStyleSheet()
    
    # Create custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=1  # Center alignment
    )
    
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Normal'],
        fontSize=12,
        textColor=colors.gray,
        spaceAfter=30,
        alignment=1  # Center alignment
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=16,
        spaceBefore=20,
        spaceAfter=10,
        textColor=colors.HexColor('#2c3e50')
    )
    
    analysis_style = ParagraphStyle(
        'CustomAnalysis',
        parent=styles['Normal'],
        fontSize=11,
        leading=14,  # Line spacing
        spaceBefore=6,
        spaceAfter=6
    )

    story = []

    # Add title and timestamp
    story.append(Paragraph("Health & Safety Risk Assessment Report", title_style))
    story.append(Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", subtitle_style))
    story.append(Spacer(1, 40))  # More space after title section

    # Process each image and its analysis
    for i, (img_path, analysis) in enumerate(zip(images, analysis_results)):
        # Add section header
        story.append(Paragraph(f"Assessment {i+1}", heading_style))
        story.append(Spacer(1, 10))

        # Add image
        try:
            img = Image.open(img_path)
            img_width = 400  # Adjust as needed
            img_height = img.height * (img_width / img.width)
            img_io = BytesIO()
            img.save(img_io, format='PNG')
            img_io.seek(0)
            rl_img = RLImage(img_io, width=img_width, height=img_height)
            story.append(rl_img)
            story.append(Spacer(1, 20))
        except Exception as e:
            story.append(Paragraph(f"Error loading image: {str(e)}", analysis_style))
            story.append(Spacer(1, 10))

        # Process and format the analysis text
        # Split the analysis into sections and format each part
        sections = analysis.split('\n\n')
        for section in sections:
            if section.strip():  # Only process non-empty sections
                # Split into points if the section contains numbered points
                if '1.' in section or '2.' in section:
                    points = section.split('\n')
                    for point in points:
                        if point.strip():
                            story.append(Paragraph(point.strip(), analysis_style))
                            story.append(Spacer(1, 6))  # Space between points
                else:
                    story.append(Paragraph(section.strip(), analysis_style))
                    story.append(Spacer(1, 6))  # Space between paragraphs
        
        # Add more space between assessments
        story.append(Spacer(1, 30))

    # Add footer
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=8,
        textColor=colors.gray,
        alignment=1  # Center alignment
    )
    story.append(Spacer(1, 40))
    story.append(Paragraph("Generated by DeanAI Photo-Based H&S Risk Assessor", footer_style))
    story.append(Paragraph("Powered by GPT-4o", footer_style))

    # Build the PDF
    doc.build(story)
    return pdf_path

def analyze_images_with_gpt4o(images):
    summaries = []
    assessments = []

    for img in images:
        img_pil = Image.open(img)
        img_b64 = image_to_base64(img_pil)

        try:
            response = client.chat.completions.create(
                model="gpt-4o",  # Updated to use gpt-4o which has vision capabilities
                messages=[
                    {"role": "system", "content": "You are a workplace safety expert specialising in UK Health & Safety compliance."},
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": (
                                "Please do two things:\n"
                                "1. Describe the image as a workplace scene.\n"
                                "2. Provide a UK-style Health & Safety risk assessment based on what you see, "
                                "following HSE guidelines (e.g., HSW Act 1974, PUWER, PPE 2022)."
                            )},
                            {"type": "image_url", "image_url": {
                                "url": f"data:image/png;base64,{img_b64}"
                            }},
                        ],
                    }
                ],
                max_tokens=1000,
            )

            result = response.choices[0].message.content
            summaries.append(f"--- Analysis for {img.name} ---\n{result}")
            assessments.append(result)
        except Exception as e:
            error_msg = f"--- Error analyzing {img.name} ---\nError: {str(e)}"
            summaries.append(error_msg)
            assessments.append(error_msg)

    full_output = "\n\n".join(summaries)
    
    # Generate PDF report
    pdf_path = create_pdf_report(assessments, images)
    
    return full_output, pdf_path

# Gradio UI
with gr.Blocks(theme=gr.themes.Soft()) as demo:
    gr.Markdown("# DeanAI Photo-Based H&S Risk Assessor")
    gr.Markdown("Upload workstation or site photos and get a UK Health & Safety risk assessment instantly.")
    
    with gr.Row():
        with gr.Column(scale=1):
            file_input = gr.File(
                file_types=["image"],
                file_count="multiple",
                label="Upload Photo(s)"
            )
            analyze_btn = gr.Button("Analyze Images", variant="primary")
            # Add image gallery to display uploaded images
            image_gallery = gr.Gallery(
                label="Uploaded Images",
                show_label=True,
                elem_id="gallery",
                columns=[2],
                rows=[2],
                height="auto",
                object_fit="contain"
            )
        
        with gr.Column(scale=2):
            text_output = gr.Textbox(
                label="Scene Analysis + H&S Risk Report",
                lines=30
            )
            pdf_output = gr.File(
                label="Download PDF Report",
                file_types=[".pdf"]
            )
    
    def update_gallery(files):
        if files is None:
            return None
        return [file.name for file in files]
    
    # Update gallery when files are uploaded
    file_input.change(
        fn=update_gallery,
        inputs=file_input,
        outputs=image_gallery
    )
    
    # Analyze images when button is clicked
    analyze_btn.click(
        fn=analyze_images_with_gpt4o,
        inputs=file_input,
        outputs=[text_output, pdf_output]
    )

if __name__ == "__main__":
    # Check if API key is set
    if not os.getenv("OPENAI_API_KEY"):
        print("Error: OPENAI_API_KEY not found in environment variables")
        print("Please create a .env file with your OpenAI API key")
        exit(1)
    
    logger.info("=== DeanAI Photo-Based H&S Risk Assessor ===")
    logger.info("Starting server...")
    
    try:
        # Launch with sharing enabled to get public Gradio link
        demo.queue().launch(
            server_name=None,
            server_port=None,
            share=True,  # Enable sharing to get public Gradio link
            debug=True,
            show_error=True,
            quiet=False
        )
    except Exception as e:
        logger.error(f"Failed to start server: {str(e)}")
        exit(1) 